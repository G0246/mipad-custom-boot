name: NodeJs with Release

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Update JSON file
      run: |
        set -e  # Exit on any error
        VERSION=${{ github.event.release.tag_name }}
        if [ -z "$VERSION" ]; then
          echo "Error: Release tag name is empty"
          exit 1
        fi
        VERSION_CODE=$(echo "$VERSION" | tr -dc '0-9')
        VERSION_NO_V=${VERSION#v}
        ZIP_URL="https://github.com/${{ github.repository }}/releases/latest/download/mipad-custom-boot-${VERSION_NO_V}.zip"
        CHANGELOG_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/README.md"
        
        jq -n \
          --arg version "$VERSION" \
          --argjson versionCode "$VERSION_CODE" \
          --arg zipUrl "$ZIP_URL" \
          --arg changelog "$CHANGELOG_URL" \
          '{
            version: $version,
            versionCode: $versionCode,
            zipUrl: $zipUrl,
            changelog: $changelog
          }' > temp.json || { echo "Error: jq failed"; exit 1; }
          
        mv temp.json update.json
        
    - name: Commit and push changes
      run: |
        set -e
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add update.json
        git commit -m "chore: update JSON for release ${{ github.event.release.tag_name }}"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}